package com.ecam.calendar.controller;
import com.ecam.calendar.model.Lecture;
import com.ecam.calendar.model.User;
import com.ecam.calendar.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
//import org.springframework.data.rest.webmvc.ResourceNotFoundException;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import java.util.*;
import java.sql.Date;
import java.sql.Time;
@Controller // This means that this class is a Controller
@RequestMapping(path="/User") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private com.ecam.calendar.repository.UserRepository userRepository;

    @PostMapping(path="/User/Create") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String firstName
            , @RequestParam String lastName, @RequestParam String role ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setFirstName(firstName);
        n.setLastName(lastName);
        n.setRole(role);

        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/User/Read")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

//    @DeleteMapping(path="/User/Delete/{id}")
//    public Map<String, Boolean> deleteUser(@PathVariable(value = "id") Integer id)
//            throws ResourceNotFoundException {
//        User user = userRepository.findById(id)
//                .orElseThrow(() -> new ResourceNotFoundException("User not found for this id :: " + id));
//
//        userRepository.delete(user);
//        Map<String, Boolean> response = new HashMap<>();
//        response.put("deleted", Boolean.TRUE);
//        return response;
//    }
}
