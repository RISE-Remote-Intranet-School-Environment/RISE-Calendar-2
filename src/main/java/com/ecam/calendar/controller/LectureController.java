package com.ecam.calendar.controller;
import com.ecam.calendar.model.Lecture;
import com.ecam.calendar.repository.LectureRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
//import org.springframework.data.rest.webmvc.ResourceNotFoundException;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import java.util.*;
import java.sql.Date;
import java.sql.Time;


@Controller // This means that this class is a Controller
@RequestMapping(path="/lecture") // This means URL's start with /demo (after Application path)
public class LectureController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private com.ecam.calendar.repository.LectureRepository lectureRepository;

    @PostMapping(path="/Lecture/Create") // Map ONLY POST Requests
    public @ResponseBody String addNewLecture (@RequestParam String code
            , @RequestParam String room, @RequestParam Time startTime, @RequestParam Time endTime, @RequestParam Integer sessionNumber, @RequestParam String teachers, @RequestParam Date weekDay) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Lecture n = new Lecture();
        n.setCode(code);
        n.setRoom(room);
        n.setStartTime(startTime);
        n.setEndTime(endTime);
        n.setSessionNumber(sessionNumber);
        n.setTeachers(teachers);
        n.setWeekDay(weekDay);
        lectureRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/Lecture/Read")
    public @ResponseBody Iterable<Lecture> getAllLectures() {
        // This returns a JSON or XML with the users
        return lectureRepository.findAll();
    }

//    @DeleteMapping(path="/Lecture/Delete/{id}")
//    public Map<String, Boolean> deleteLecture(@PathVariable(value = "id") Integer id)
//            throws ResourceNotFoundException {
//        Lecture lecture = lectureRepository.findById(id)
//                .orElseThrow(() -> new ResourceNotFoundException("Lecture not found for this id :: " + id));
//
//        lectureRepository.delete(lecture);
//        Map<String, Boolean> response = new HashMap<>();
//        response.put("deleted", Boolean.TRUE);
//        return response;
//    }
}





